/**
小明被劫持到X赌城，被迫与其他3人玩牌。
一副扑克牌（去掉大小王牌，共52张），均匀发给4个人，每个人13张。
这时，小明脑子里突然冒出一个问题：
如果不考虑花色，只考虑点数，也不考虑自己得到的牌的先后顺序，自己手里能拿到的初始牌型组合一共有多少种呢？

请填写该整数，不要填写任何多余的内容或说明文字。
答案：3598180


解析：
递归13次，不过这次递归的是每一种牌的取得个数。也就是在13次的递归之中，每一次研究当前这种牌能取多少
（具体一点就是比如说该考虑8这张牌了，那么有5种可能，从一张不拿到四张全拿），当递归次数达到13时，直接比较当前牌的总数是不是13。
当然优化的方法是直接把另外一个条件也作为结束递归的标志：“目前的牌的总数大于了13，那么之后就算全部不取都无法满足条件”。
算法复杂度是O(5^n)，这道题目里面n = 13；
 */
package 牌型种数;

public class Main {
	static int ans = 0;

	public static void main(String[] args) {
		dfs(0, 0);
		System.out.println(ans);
	}

	public static void dfs(int type, int sum) {
		if (sum > 13)
			return;
		if (type == 13) {
			if (sum == 13)
				ans++;
			return;
		}
		for (int i = 0; i < 5; i++) {
			dfs(type + 1, sum + i);
		}
	}

}
